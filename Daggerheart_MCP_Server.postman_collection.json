{
	"info": {
		"_postman_id": "daggerheart-mcp-server",
		"name": "Daggerheart MCP Server",
		"description": "A comprehensive Postman collection for testing the Daggerheart MCP Server endpoints and tools. This collection includes all REST API endpoints and tool execution examples.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "daggerheart-team"
	},
	"item": [
		{
			"name": "Server Info",
			"item": [
				{
					"name": "Get Server Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Get basic server information and status"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"Daggerheart MCP Server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Production-grade MCP server for Daggerheart AI Agent\",\n  \"status\": \"running\"\n}"
						}
					]
				},
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check server health and status"
					},
					"response": [
						{
							"name": "Healthy Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-07-18T19:18:38.078035\",\n  \"uptime\": 123.45\n}"
						}
					]
				},
				{
					"name": "API Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/docs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"docs"
							]
						},
						"description": "Get interactive API documentation (Swagger UI)"
					},
					"response": []
				}
			],
			"description": "Basic server information and health check endpoints"
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "List Available Tools",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tools",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tools"
							]
						},
						"description": "Get list of all available tools with their metadata"
					},
					"response": [
						{
							"name": "Tools List",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tools",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tools"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"tools\": [\n    {\n      \"name\": \"get_current_time\",\n      \"description\": \"Get the current date and time\",\n      \"version\": \"1.0.0\",\n      \"tags\": [\"utility\", \"time\"],\n      \"input_schema\": {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\": []\n      },\n      \"output_schema\": {\n        \"type\": \"string\",\n        \"description\": \"Current timestamp\"\n      }\n    },\n    {\n      \"name\": \"search_web\",\n      \"description\": \"Search the web for information\",\n      \"version\": \"1.0.0\",\n      \"tags\": [\"web\", \"search\"],\n      \"input_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"query\": {\n            \"type\": \"string\",\n            \"description\": \"Search query\"\n          },\n          \"max_results\": {\n            \"type\": \"integer\",\n            \"description\": \"Maximum number of results\"\n          }\n        },\n        \"required\": [\"query\"]\n      },\n      \"output_schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\"\n        },\n        \"description\": \"Search results\"\n      }\n    },\n    {\n      \"name\": \"file_operations\",\n      \"description\": \"Perform file operations (read, write, list)\",\n      \"version\": \"1.0.0\",\n      \"tags\": [\"file\", \"system\"],\n      \"input_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"operation\": {\n            \"type\": \"string\",\n            \"enum\": [\"read\", \"write\", \"list\"]\n          },\n          \"path\": {\n            \"type\": \"string\",\n            \"description\": \"File path\"\n          },\n          \"content\": {\n            \"type\": \"string\",\n            \"description\": \"File content (for write operation)\"\n          }\n        },\n        \"required\": [\"operation\", \"path\"]\n      },\n      \"output_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"success\": {\n            \"type\": \"boolean\"\n          },\n          \"data\": {\n            \"type\": \"string\"\n          },\n          \"error\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  ]\n}"
						}
					]
				}
			],
			"description": "Tool discovery and management endpoints"
		},
		{
			"name": "Tool Execution",
			"item": [
				{
					"name": "Get Current Time",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"time-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_current_time\",\n    \"arguments\": {}\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"execute"
							]
						},
						"description": "Execute the get_current_time tool to get the current timestamp"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"time-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_current_time\",\n    \"arguments\": {}\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/execute",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"execute"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"time-request-1\",\n  \"result\": \"2025-07-18T19:18:38.078035\",\n  \"error\": null\n}"
						}
					]
				},
				{
					"name": "Search Web",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"search-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_web\",\n    \"arguments\": {\n      \"query\": \"MCP server\",\n      \"max_results\": 3\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"execute"
							]
						},
						"description": "Execute the search_web tool to search for information"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"search-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_web\",\n    \"arguments\": {\n      \"query\": \"MCP server\",\n      \"max_results\": 3\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/execute",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"execute"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"search-request-1\",\n  \"result\": [\n    {\n      \"title\": \"Search result for: MCP server\",\n      \"url\": \"https://example.com\",\n      \"snippet\": \"Information about MCP server\"\n    }\n  ],\n  \"error\": null\n}"
						}
					]
				},
				{
					"name": "File Operations - List Directory",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"file-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"file_operations\",\n    \"arguments\": {\n      \"operation\": \"list\",\n      \"path\": \".\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"execute"
							]
						},
						"description": "Execute file_operations tool to list directory contents"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"file-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"file_operations\",\n    \"arguments\": {\n      \"operation\": \"list\",\n      \"path\": \".\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/execute",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"execute"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"file-request-1\",\n  \"result\": {\n    \"success\": true,\n    \"data\": \"[\\\"requirements.txt\\\", \\\".git\\\", \\\"mcp_server\\\", \\\"Modelfile\\\", \\\"models\\\", \\\"docs\\\", \\\"README.md\\\", \\\"agent.py\\\", \\\".venv\\\"]\",\n    \"error\": \"\"\n  },\n  \"error\": null\n}"
						}
					]
				},
				{
					"name": "File Operations - Read File",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"file-read-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"file_operations\",\n    \"arguments\": {\n      \"operation\": \"read\",\n      \"path\": \"README.md\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"execute"
							]
						},
						"description": "Execute file_operations tool to read a file"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"file-read-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"file_operations\",\n    \"arguments\": {\n      \"operation\": \"read\",\n      \"path\": \"README.md\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/execute",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"execute"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"file-read-request-1\",\n  \"result\": {\n    \"success\": true,\n    \"data\": \"# Daggerheart AI Agent\\n\\nA custom AI agent built with Gemma 3n, LangGraph, and Ollama...\",\n    \"error\": \"\"\n  },\n  \"error\": null\n}"
						}
					]
				},
				{
					"name": "File Operations - Write File",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"file-write-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"file_operations\",\n    \"arguments\": {\n      \"operation\": \"write\",\n      \"path\": \"test_output.txt\",\n      \"content\": \"This is a test file created by the MCP server.\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"execute"
							]
						},
						"description": "Execute file_operations tool to write a file"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"file-write-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"file_operations\",\n    \"arguments\": {\n      \"operation\": \"write\",\n      \"path\": \"test_output.txt\",\n      \"content\": \"This is a test file created by the MCP server.\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/execute",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"execute"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"file-write-request-1\",\n  \"result\": {\n    \"success\": true,\n    \"data\": \"File written to test_output.txt\",\n    \"error\": \"\"\n  },\n  \"error\": null\n}"
						}
					]
				}
			],
			"description": "Tool execution examples for all available tools"
		},
		{
			"name": "WebSocket",
			"item": [
				{
					"name": "WebSocket Connection",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Upgrade",
								"value": "websocket"
							},
							{
								"key": "Connection",
								"value": "Upgrade"
							}
						],
						"url": {
							"raw": "{{base_url}}/ws",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ws"
							]
						},
						"description": "WebSocket endpoint for real-time communication with the MCP server"
					},
					"response": []
				}
			],
			"description": "WebSocket endpoints for real-time communication"
		},
		{
			"name": "Error Examples",
			"item": [
				{
					"name": "Invalid Tool Name",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"error-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"nonexistent_tool\",\n    \"arguments\": {}\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"execute"
							]
						},
						"description": "Example of error response when trying to execute a non-existent tool"
					},
					"response": [
						{
							"name": "Error Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"error-request-1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"nonexistent_tool\",\n    \"arguments\": {}\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/execute",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"execute"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"error-request-1\",\n  \"result\": null,\n  \"error\": {\n    \"code\": -32603,\n    \"message\": \"Tool 'nonexistent_tool' not found\"\n  }\n}"
						}
					]
				},
				{
					"name": "Invalid Method",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"error-request-2\",\n  \"method\": \"invalid/method\",\n  \"params\": {}\n}"
						},
						"url": {
							"raw": "{{base_url}}/execute",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"execute"
							]
						},
						"description": "Example of error response when using an invalid method"
					},
					"response": [
						{
							"name": "Error Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"error-request-2\",\n  \"method\": \"invalid/method\",\n  \"params\": {}\n}"
								},
								"url": {
									"raw": "{{base_url}}/execute",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"execute"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"Invalid method\"\n}"
						}
					]
				}
			],
			"description": "Error handling examples and edge cases"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default headers for all requests",
					"pm.request.headers.add({\n    key: 'User-Agent',\n    value: 'Daggerheart-MCP-Client/1.0.0'\n});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Basic response validation",
					"pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});",
					"",
					"pm.test(\"Response time is less than 2000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(2000);\n});",
					"",
					"pm.test(\"Content-Type is application/json\", function () {\n    pm.response.to.have.header(\"Content-Type\");\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8001",
			"type": "string",
			"description": "Base URL for the MCP server"
		},
		{
			"key": "server_host",
			"value": "localhost",
			"type": "string",
			"description": "Server hostname"
		},
		{
			"key": "server_port",
			"value": "8001",
			"type": "string",
			"description": "Server port"
		}
	]
} 